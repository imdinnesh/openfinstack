services:
  auth-db:
    image: postgres:latest
    container_name: fintech_auth_db
    environment:
      POSTGRES_USER: auth
      POSTGRES_PASSWORD: auth
      POSTGRES_DB: fintechdb_auth
    ports:
      - "5432:5432"
    networks:
      - fintech-net
    healthcheck: # Basic health check
      test: ["CMD-SHELL", "pg_isready -U auth -d fintechdb_auth"]
      interval: 10s
      timeout: 5s
      retries: 5

  kyc-db:
    image: postgres:latest
    container_name: fintech_kyc_db
    environment:
      POSTGRES_USER: kyc
      POSTGRES_PASSWORD: kyc
      POSTGRES_DB: fintechdb_kyc
    ports:
      - "5433:5432"
    networks:
      - fintech-net
    healthcheck: # Basic health check
      test: ["CMD-SHELL", "pg_isready -U kyc -d fintechdb_kyc"]
      interval: 10s
      timeout: 5s
      retries: 5

  wallet-db:
    image: postgres:latest
    container_name: fintech_wallet_db
    environment:
      POSTGRES_USER: wallet
      POSTGRES_PASSWORD: wallet
      POSTGRES_DB: fintechdb_wallet
    ports:
      - "5434:5432"
    networks:
      - fintech-net
    healthcheck: # Basic health check
      test: ["CMD-SHELL", "pg_isready -U wallet -d fintechdb_wallet"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: fintech_redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - fintech-net
    healthcheck: # Basic health check
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fintech_zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - fintech-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fintech_kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      # Production-ready settings
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - fintech-net
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fintech_kafka_ui
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: fintech-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "1080:8080"
    networks:
      - fintech-net

  smtp4dev:
    image: rnwood/smtp4dev
    container_name: fintech_smtp4dev
    restart: unless-stopped
    ports:
      - "3030:80"  # Web UI
      - "2525:25"  # SMTP port
    networks:
      - fintech-net
    
  prometheus:
    image: prom/prometheus
    container_name: fintech_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - fintech-net

  grafana:
    image: grafana/grafana
    container_name: fintech_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - fintech-net

volumes:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  grafana-storage:

networks:
  fintech-net:
    driver: bridge